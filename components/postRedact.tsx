import { Post } from "types/post";
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { IPostInputs } from "pages/create";
import {
  Box,
  Button,
  ButtonGroup,
  Container,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  IconButton,
  Input,
  Spinner,
  Stack,
  Textarea,
  Tooltip,
  useClipboard,
  useToast,
} from "@chakra-ui/react";
import { useAppSelector } from "hooks/redux.hooks";
import { getDownloadURL, ref, uploadBytes } from "@firebase/storage";
import { storage } from "firebase/app";
import { updatePost } from "services/postCreation.service";
import { AddIcon, CopyIcon, QuestionOutlineIcon } from "@chakra-ui/icons";
import ReactMarkdown from "react-markdown";
import ChakraUIRenderer from "chakra-ui-markdown-renderer";

interface RedactProps {
  post: Post;
  userId: string;
}

const RedactPost: React.FC<RedactProps> = ({ post, userId }) => {
  const {
    register,
    watch,
    handleSubmit,
    formState: { errors },
  } = useForm<IPostInputs>({
    defaultValues: {
      title: post.title,
      description: post.description,
      text: post.text,
    },
  });
  const [showPreview, setShowPreview] = useState<boolean>(false);
  const [downloadUrl, setDownloadUrl] = useState<string>("");
  const [imageIsUploading, setImageIsUploading] = useState<boolean>(false);
  const toast = useToast();
  const { onCopy } = useClipboard(`![alt](${downloadUrl})`);
  const userToken = useAppSelector((state) => state.user.userInfo.token);

  const textWatcher = watch("text");

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const image = e.target.files[0];
      const extension = image.type.split("/")[1];
      const formData = new FormData();
      formData.append("file", image);

      const fileRef = ref(
        storage,
        `uploads/${userId}/${Date.now()}.${extension}`
      );
      setImageIsUploading(true);

      const task = uploadBytes(fileRef, image);

      task
        .then(() => getDownloadURL(fileRef))
        .then((url) => {
          setDownloadUrl(url);
          setImageIsUploading(false);
        })
        .catch(() => {
          toast({
            title: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü§î",
            status: "error",
          });
        });
    }
  };

  const onSubmit = async (data: IPostInputs) => {
    const dataToSend = {
      ...data,
      slug: post.slug,
    };
    const res = await updatePost(dataToSend, post._id, userToken);

    if (res) {
      toast({
        status: "success",
        description:
          "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ –ø–æ—Å—Ç, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
      });
    }
  };

  return (
    <Box
      mt={5}
      w={"100%"}
      d={"flex"}
      flexDirection={"column"}
      alignItems={"Center"}
    >
      <form
        onSubmit={handleSubmit(onSubmit)}
        noValidate
        style={{ minWidth: "60%" }}
      >
        <Stack spacing={5}>
          <FormControl>
            <Input
              size="lg"
              placeholder={"–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏"}
              variant="flushed"
              fontWeight={"bold"}
              fontSize={"37"}
              isInvalid={!!errors.title}
              id={"header"}
              {...register("title", {
                required: "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                minLength: { value: 3, message: "–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞" },
              })}
            />
          </FormControl>
          <FormControl>
            <FormLabel>–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏</FormLabel>
            <Input
              size="md"
              {...register("description", {
                required: "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                minLength: { value: 3, message: "–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞" },
              })}
            />
            <FormErrorMessage>{errors.description?.message}</FormErrorMessage>
          </FormControl>

          <Box d={"flex"} gap={5} flexDirection={["column", "row"]}>
            <Input
              isReadOnly
              placeholder="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
              value={downloadUrl ? downloadUrl : ""}
            />
            <IconButton
              icon={<CopyIcon />}
              onClick={onCopy}
              aria-label="Copy image url"
              disabled={!downloadUrl}
            />
          </Box>
          <Button
            rightIcon={imageIsUploading ? undefined : <AddIcon />}
            as={"label"}
            px={10}
            flex={"none"}
            disabled={imageIsUploading}
          >
            {imageIsUploading ? (
              <Spinner />
            ) : (
              <>
                –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                <Input
                  type={"file"}
                  accept="image/x-png,image/jpeg"
                  onChange={handleImageUpload}
                  hidden
                />
              </>
            )}
          </Button>
          <Flex flexDirection={"column"} gap={2}>
            <Tooltip
              label="–í–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–º–µ—Ç–∫–∏ md"
              placement={"left"}
            >
              <QuestionOutlineIcon alignSelf={"end"} />
            </Tooltip>
            {showPreview ? (
              <Container maxW="container.md">
                <ReactMarkdown components={ChakraUIRenderer()} skipHtml>
                  {textWatcher}
                </ReactMarkdown>
              </Container>
            ) : (
              <>
                <FormControl isInvalid={!!errors.text}>
                  <Textarea
                    minH={200}
                    {...register("text", {
                      required: "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                      minLength: {
                        value: 5,
                        message: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞ - 5 —Å–∏–º–≤–æ–ª–æ–≤",
                      },
                      maxLength: {
                        value: 65536,
                        message: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞ - 65—Ç —Å–∏–º–≤–æ–ª–æ–≤",
                      },
                    })}
                  />
                  <FormErrorMessage>{errors.text?.message}</FormErrorMessage>
                </FormControl>
              </>
            )}
          </Flex>
          <ButtonGroup>
            <Button type={"submit"} colorScheme="blue">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </Button>
            <Button onClick={() => setShowPreview((prev) => !prev)}>
              {showPreview ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" : "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"}
            </Button>
          </ButtonGroup>
        </Stack>
      </form>
    </Box>
  );
};

export default RedactPost;
